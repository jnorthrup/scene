scene.SceneLayoutApp -> scene.SceneLayoutApp:
    javax.swing.JInternalFrame dumpWindow -> dumpWindow
    javax.swing.JTextPane permText -> permText
    java.util.Timer TIMER -> TIMER
    com.thoughtworks.xstream.XStream XSTREAM -> XSTREAM
    javax.swing.JDesktopPane desktopPane -> desktopPane
    scene.SceneLayoutApp instance -> instance
    java.util.concurrent.ExecutorService threadPool -> threadPool
    void main(java.lang.String[]) -> main
    scene.SceneLayoutApp getInstance() -> getInstance
    javax.swing.JInternalFrame access$000() -> access$000
scene.SceneLayoutApp$1 -> scene.h:
    javax.swing.JEditorPane ed -> a
    void paint(java.awt.Graphics) -> paint
scene.SceneLayoutApp$2 -> scene.d:
    javax.swing.UIManager$LookAndFeelInfo val$lookAndFeelInfo -> a
    javax.swing.JFrame val$frame -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.SceneLayoutApp$3 -> scene.e:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.SceneLayoutApp$4 -> scene.f:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.SceneLayoutApp$5 -> scene.g:
    javax.swing.JCheckBox val$permaViz -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.SceneLayoutApp$6 -> scene.a:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.SceneLayoutApp$6$1 -> scene.c:
    void run() -> run
scene.ScenePanel -> scene.b:
    java.util.HashMap images -> a
    java.util.WeakHashMap panes -> b
    java.awt.datatransfer.DataFlavor[] FLAVORS -> c
    void paint(java.awt.Graphics) -> paint
scene.action.CreateSceneWindowAction -> scene.b.l:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.CreateWebViewV1Action -> scene.b.b:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.CreateWebViewV1Action$1 -> scene.b.m:
    scene.anim.WebAnimator val$animator -> a
    void run() -> run
scene.action.CreateWebViewV2Action -> scene.b.k:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.CreateWebViewV2Action$1 -> scene.b.d:
    scene.anim.WebAnimator val$animator -> a
    void run() -> run
scene.action.QuitAction -> scene.b.h:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.RecordWebScrollerGifAnim -> scene.b.a:
    scene.anim.WebAnimatorImpl webAnimator -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.RecordWebScrollerGifAnim$1 -> scene.b.i:
    boolean val$custom -> a
    int val$iend -> b
    javax.swing.JScrollBar val$slider2 -> c
    java.util.concurrent.Exchanger val$engine -> d
    scene.action.RecordWebScrollerGifAnim this$0 -> e
    void run() -> run
scene.action.RecordWebScrollerPngDir -> scene.b.c:
    scene.anim.WebAnimatorImpl webAnimator -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.action.RecordWebScrollerPngDir$1 -> scene.b.g:
    boolean val$custom -> a
    int val$iend -> b
    javax.swing.JScrollBar val$slider1 -> c
    java.util.concurrent.Exchanger val$engine -> d
    scene.action.RecordWebScrollerPngDir this$0 -> e
    void run() -> run
scene.action.RecordWebScrollerPngDir$2 -> scene.b.f:
    java.io.File val$selectedFile -> a
    java.lang.Object call() -> call
scene.action.RecordWebScrollerPngDir$3 -> scene.b.e:
    java.util.concurrent.Future val$integerFuture -> a
    java.io.File val$selectedFile -> b
    java.lang.Object call() -> call
scene.action.WebAnimUrlTextAction -> scene.b.j:
    scene.dnd.WebViewDropTargetListener webViewDropTargetListener -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.alg.Pair -> scene.alg.Pair:
    java.lang.Object[] v -> v
    java.lang.Object $1() -> $1
    java.lang.Object $2() -> $2
    scene.alg.Pair $1(java.lang.Object) -> $1
    scene.alg.Pair $2(java.lang.Object) -> $2
scene.alg.Triple -> scene.alg.Triple:
    java.lang.Object[] v -> v
    java.lang.Object $1() -> $1
    java.lang.Object $2() -> $2
    java.lang.Object $3() -> $3
    scene.alg.Triple $1(java.lang.Object) -> $1
    scene.alg.Triple $2(java.lang.Object) -> $2
    scene.alg.Triple $3(java.lang.Object) -> $3
scene.anim.ProgressBarAnimator -> scene.c.o:
    javax.swing.JInternalFrame inf -> a
scene.anim.ProgressBarAnimator$1 -> scene.c.x:
    javax.swing.JTextField val$maxVtext -> a
    javax.swing.JProgressBar val$bar -> b
    void ancestorMoved(java.awt.event.HierarchyEvent) -> ancestorMoved
    void ancestorResized(java.awt.event.HierarchyEvent) -> ancestorResized
scene.anim.ProgressBarAnimator$2 -> scene.c.b:
    java.util.ArrayList val$frames -> a
    javax.swing.JProgressBar val$bar -> b
    javax.swing.JTextField val$minVtext -> c
    javax.swing.JTextField val$maxVtext -> d
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator -> scene.c.w:
    java.util.Map x -> a
    javax.swing.JInternalFrame inf -> b
    void access$000(java.lang.reflect.Method,java.lang.String,java.lang.Class[],java.lang.Object,javax.swing.JComponent) -> a
scene.anim.SliderBarAnimator$1 -> scene.c.g:
    java.util.ArrayList val$frames -> a
    javax.swing.JSlider val$bar -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$10 -> scene.c.s:
    javax.swing.JSlider val$bar -> a
    javax.swing.JCheckBox val$Paintlabels -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$11 -> scene.c.q:
    javax.swing.JSlider val$bar -> a
    javax.swing.JCheckBox val$Paintticks -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$2 -> scene.c.k:
    javax.swing.JSlider val$bar -> a
    javax.swing.JTextField val$Minimum -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$3 -> scene.c.j:
    javax.swing.JSlider val$bar -> a
    javax.swing.JTextField val$Maximum -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$4 -> scene.c.i:
    javax.swing.JSlider val$bar -> a
    javax.swing.JCheckBox val$Inverted -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.SliderBarAnimator$5 -> scene.c.h:
    javax.swing.JSlider val$bar -> a
    javax.swing.JSpinner val$Minortickspacing -> b
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
scene.anim.SliderBarAnimator$6 -> scene.c.e:
    javax.swing.JSlider val$bar -> a
    javax.swing.JSpinner val$Majortickspacing -> b
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
scene.anim.SliderBarAnimator$7 -> scene.c.f:
    javax.swing.JSlider val$bar -> a
    javax.swing.JSpinner val$Orientation -> b
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
scene.anim.SliderBarAnimator$8 -> scene.c.c:
    javax.swing.JSlider val$bar -> a
    javax.swing.JSpinner val$Extent -> b
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
scene.anim.SliderBarAnimator$9 -> scene.c.d:
    javax.swing.JSlider val$bar -> a
    javax.swing.JCheckBox val$Painttrack -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
scene.anim.WebAnimator -> scene.c.u:
    javax.swing.JTextField getUrlText() -> b
    void setSize(int,int) -> setSize
    void show() -> show
    void pack() -> pack
scene.anim.WebAnimatorImpl -> scene.c.a:
    javax.swing.JToolBar bar -> b
    javax.swing.JTextField urlText -> c
    javax.swing.JLabel qrCode -> d
    javax.swing.JPanel panel -> e
    javax.swing.JPanel content -> f
    java.awt.datatransfer.DataFlavor[] dataFlavors -> g
    javax.swing.JSlider startSlider -> h
    javax.swing.JSlider stopSlider -> i
    javax.swing.JScrollPane jScrollPane -> a
    javax.swing.JToolBar getBar() -> a
    javax.swing.JTextField getUrlText() -> b
    javax.swing.JLabel getQrCode() -> c
    javax.swing.JPanel getPanel() -> d
    void updateEditor(java.net.URL) -> a
    javax.swing.JComponent getHtmlPanel() -> e
    javax.swing.JPanel getContent() -> f
    java.awt.datatransfer.DataFlavor[] getDataFlavors() -> g
    javax.swing.JSlider getStartSlider() -> h
    javax.swing.JSlider getStopSlider() -> i
scene.anim.WebAnimatorV1 -> scene.c.v:
    javax.swing.JToolBar bar -> f
    javax.swing.JTextField urlText -> g
    javax.swing.JLabel qrCode -> b
    javax.swing.JPanel panel -> h
    javax.swing.JPanel content -> i
    java.awt.datatransfer.DataFlavor[] dataFlavors -> c
    javax.swing.JSlider startSlider -> d
    javax.swing.JSlider stopSlider -> e
    javax.swing.JEditorPane htmlPanel -> j
    javax.swing.JToolBar getBar() -> a
    javax.swing.JTextField getUrlText() -> b
    javax.swing.JLabel getQrCode() -> c
    javax.swing.JPanel getPanel() -> d
    void updateEditor(java.net.URL) -> a
    javax.swing.JComponent getHtmlPanel() -> e
scene.anim.WebAnimatorV1$1 -> scene.c.l:
    javax.swing.JScrollBar val$verticalScrollBar -> a
    scene.anim.WebAnimatorV1 this$0 -> b
    void adjustmentValueChanged(java.awt.event.AdjustmentEvent) -> adjustmentValueChanged
scene.anim.WebAnimatorV1$2 -> scene.c.m:
    scene.anim.WebAnimatorV1 this$0 -> a
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
scene.anim.WebAnimatorV1$3 -> scene.c.n:
    javax.swing.ImageIcon val$icon -> a
    scene.anim.WebAnimatorV1 this$0 -> b
    void run() -> run
scene.anim.WebAnimatorV1$MyChangeListener -> scene.c.z:
    javax.swing.JScrollBar verticalScrollBar -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
scene.anim.WebAnimatorV2 -> scene.c.y:
    org.lobobrowser.html.gui.HtmlPanel htmlPanel -> b
    void updateEditor(java.net.URL) -> a
    javax.swing.JComponent getHtmlPanel() -> e
scene.anim.WebAnimatorV2$1 -> scene.c.p:
    scene.anim.WebAnimatorV2 this$0 -> a
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
scene.anim.WebAnimatorV2$2 -> scene.c.r:
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
scene.anim.WebAnimatorV2$3 -> scene.c.t:
    javax.swing.ImageIcon val$icon -> a
    scene.anim.WebAnimatorV2 this$0 -> b
    void run() -> run
scene.dnd.ImageUrlDropTargetListener -> scene.d.d:
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
scene.dnd.ImageUrlDropTargetListener$1 -> scene.d.c:
    boolean $assertionsDisabled -> a
    java.net.URL val$url -> b
    void run() -> run
scene.dnd.ImageUrlDropTargetListener$2 -> scene.d.b:
    scene.ScenePanel val$component -> a
    void run() -> run
scene.dnd.WebViewDropTargetListener -> scene.d.a:
    scene.anim.WebAnimatorImpl frame -> a
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
    scene.anim.WebAnimator getFrame() -> a
scene.gif.AnimatedGifEncoder -> scene.a.a:
    int width -> a
    int height -> b
    java.awt.Color transparent -> c
    int transIndex -> d
    int repeat -> e
    int delay -> f
    boolean started -> g
    java.io.OutputStream out -> h
    java.awt.image.BufferedImage image -> i
    byte[] pixels -> j
    byte[] indexedPixels -> k
    int colorDepth -> l
    byte[] colorTab -> m
    boolean[] usedEntry -> n
    int palSize -> o
    int dispose -> p
    boolean closeStream -> q
    boolean firstFrame -> r
    boolean sizeSet -> s
    int sample -> t
    void setDelay(int) -> a
    boolean addFrame(java.awt.image.BufferedImage) -> a
    boolean finish() -> a
    void setFrameRate(float) -> a
    void setQuality(int) -> b
    boolean start(java.io.OutputStream) -> a
    boolean start(java.lang.String) -> a
    void analyzePixels() -> b
    void writePalette() -> c
    void writeShort(int) -> c
    void writeString(java.lang.String) -> b
scene.gif.LZWEncoder -> scene.a.b:
    int imgW -> a
    int imgH -> b
    byte[] pixAry -> s
    int initCodeSize -> c
    int remaining -> d
    int curPixel -> e
    int n_bits -> f
    int maxbits -> g
    int maxcode -> h
    int maxmaxcode -> i
    int[] htab -> j
    int[] codetab -> k
    int hsize -> l
    int free_ent -> m
    boolean clear_flg -> n
    int g_init_bits -> o
    int ClearCode -> p
    int EOFCode -> q
    int cur_accum -> t
    int cur_bits -> u
    int[] masks -> v
    int a_count -> r
    byte[] accum -> w
    void char_out(byte,java.io.OutputStream) -> a
    void cl_hash(int) -> a
    void compress(int,java.io.OutputStream) -> a
    void flush_char(java.io.OutputStream) -> a
    int nextPixel() -> a
    void output(int,java.io.OutputStream) -> b
scene.gif.NeuQuant -> scene.a.c:
    int alphadec -> a
    byte[] thepicture -> b
    int lengthcount -> c
    int samplefac -> d
    int[][] network -> e
    int[] netindex -> f
    int[] bias -> g
    int[] freq -> h
    int[] radpower -> i
    byte[] colorMap() -> a
    void inxbuild() -> b
    void learn() -> c
    int map(int,int,int) -> a
    void unbiasnet() -> d
